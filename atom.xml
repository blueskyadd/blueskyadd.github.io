<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞猫</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blueskyadd.github.io/"/>
  <updated>2021-06-02T06:20:51.920Z</updated>
  <id>https://blueskyadd.github.io/</id>
  
  <author>
    <name>火星上的飞猫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端网络</title>
    <link href="https://blueskyadd.github.io/2021/01/12/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C/"/>
    <id>https://blueskyadd.github.io/2021/01/12/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C/</id>
    <published>2021-01-12T09:47:03.000Z</published>
    <updated>2021-06-02T06:20:51.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网络相关的知识也是面试时经常会被问到的问题，面试官很有必要确认面试者是否只会使用$.ajax()方法，还是真正了解网络请求的原理。问题列表</p></blockquote><ol><li>get和post的区别</li><li>websocket是否了解</li><li>http 2.0对于http 1.x有哪些优点？</li><li>jq的ajax返回值是什么？</li><li>说一说你知道的HTTP状态码</li><li>jsonp的原理</li><li>跨域请求资源有哪几种方式？他们的优缺点是什么？</li><li>XML和JSON的区别？<a id="more"></a><h3 id="1-get和post的区别"><a href="#1-get和post的区别" class="headerlink" title="1. get和post的区别"></a><div style="padding-left: 1em; margin: 1em 0px; border-left: 4px solid rgb(211, 211, 211); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(133, 144, 166);">1. get和post的区别</h3>get和post的区别这题看上很简单，你肯定能答出1个以上的区别，但是面试官往往期望你能答出更多更深层次的区别。这篇文章写的很详细了，大家可以研究一下——<a href="https://www.zhihu.com/question/28586791">https://www.zhihu.com/question/28586791</a><br/><br>我在这里在概括一下：<br><strong>初级的答案</strong><br>因为GET方法请求的参数都是放在请求的url上的，所以它与POST有以下明显的区别：</li></ol><ul><li>GET请求可以被添加到书签中，也可保存在浏览器历史记录中，POST不能</li><li>GET请求可以被浏览器缓存，POST不能</li><li>GET请求收到URL长度限制，所以数据长度也受限制，POST不会</li><li>GET请求只能传输ASCII字符，而POST不受此限制，还可以传输二进制数据</li></ul><p>在语义上两个方法也有区别：</p><ul><li>GET 代表获取指定服务器上资源</li><li>POST 代表向指定的资源提交要被处理的数据</li></ul><p><strong>高级些的答案</strong><br>GET产生一个TCP数据包；POST产生两个TCP数据包。<br>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。<br>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。<br/><br>但是需要多解释两句的是：</p><ul><li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li><li>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</li></ul><h3 id="2-websocket是否了解？"><a href="#2-websocket是否了解？" class="headerlink" title="2.websocket是否了解？"></a><div style="padding-left: 1em; margin: 1em 0px; border-left: 4px solid rgb(211, 211, 211); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(133, 144, 166);">2.websocket是否了解？</h3><p>通常情况下，面试官问你是否对XX有了解，一般的回答都是要涵盖下面这些点：<br/></p><ul><li>是否知道它是什么？</li><li>是否知道它的用途是什么？</li><li>它和之前某项已有的技术相比，有哪些优缺点？</li></ul><p>webSocket和http一样，同属于应用层协议。它最重要的用途是实现了客户端与服务端之间的全双工通信，当服务端数据变化时，可以第一时间通知到客户端。除此之外，它与http协议不同的地方还有：<br/></p><ul><li>http只能由客户端发起，而webSocket是双向的。</li><li>webSocket传输的数据包相对于http而言很小，很适合移动端使用</li><li>没有同源限制，可以跨域共享资源</li></ul><p>要想了解更多详细，还是去看阮一峰的教程吧——WebSocket 教程 - 阮一峰的网络日志</p><h3 id="3-http-2-0对于http-1-x有哪些优点？"><a href="#3-http-2-0对于http-1-x有哪些优点？" class="headerlink" title="3.http 2.0对于http 1.x有哪些优点？"></a><div style="padding-left: 1em; margin: 1em 0px; border-left: 4px solid rgb(211, 211, 211); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(133, 144, 166);">3.http 2.0对于http 1.x有哪些优点？</h3><p>优点（以下摘自HTTP/2.0 相比1.0有哪些重大改进？）：<br/></p><ul><li>多路复用：多路复用允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息。由于http 1.x的时代中，浏览器向同一域名下发送的http请求数量是受限的，当超出数量限制时，请求会被阻塞，大大降低了用户体验。而HTTP/2 的多路复用允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息。</li><li>二进制分帧：HTTP/2在应用层和传输层之间追加了一个二进制分帧层，最终使得多个数据流共用一个连接，更加高效的使用tcp连接。从而使得服务器的连接压力减轻，降低了内存的消耗，增大了网络的吞吐量。</li><li>首部压缩：HTTP/2引入了HPACK算法对头部进行压缩，大大减小了数据发送的字节数。</li></ul><h3 id="4-jQuery的ajax返回值是什么？"><a href="#4-jQuery的ajax返回值是什么？" class="headerlink" title="4.jQuery的ajax返回值是什么？"></a><div style="padding-left: 1em; margin: 1em 0px; border-left: 4px solid rgb(211, 211, 211); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(133, 144, 166);">4.jQuery的ajax返回值是什么？</h3><p>很多公司，尤其是金融或数据分析的公司，他们的web app会与服务端进行大量的数据交互，所以他们的面试官通常会很看重面试者对于网络请求以及异步编程的理解程度。<br/><br>jQuery中的ajax大家很常用，以至于绝大部分人把他认为是“理所应当”，而忽略了他的底层逻辑和实现原理。$.ajax()方法返回的是一个延迟对象，即$.Deferred的实例。<br/><br>所以你可以像下面这样使用$.ajax()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;利用done()和fail()方法来处理ajax请求</span><br><span class="line">$.ajax(&#123;url:&quot;http:&#x2F;&#x2F;mydomain.com&#x2F;memberInfo&#x2F;get&quot;,async: false&#125;).done(</span><br><span class="line">    responseData &#x3D;&gt; &#123;</span><br><span class="line">        console.log(responseData)</span><br><span class="line">    &#125;</span><br><span class="line">).fail(</span><br><span class="line">    ()&#x3D;&gt;&#123;console.error(&#39;出错了！&#39;)&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;$.get()也是同样的道理，除了上面延迟对象提供的方法外，还可以使用then()回调</span><br><span class="line">$.get(&quot;http:&#x2F;&#x2F;mydomain.com&#x2F;memberInfo&#x2F;get&quot;).then(responseData &#x3D;&gt; &#123;console.log(responseData);&#125;)</span><br></pre></td></tr></table></figure><br>如果你想让这两个请求都完成后再进行处理的话，可以用下面的操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var memberDef &#x3D; $.get(&quot;http:&#x2F;&#x2F;mydomain.com&#x2F;memberInfo&#x2F;get&quot;);</span><br><span class="line"></span><br><span class="line">var orderDef &#x3D; $.get(&quot;http:&#x2F;&#x2F;mydomain.com&#x2F;orderInfo&#x2F;get&quot;);</span><br><span class="line"></span><br><span class="line">$.when(memberDef, orderDef).then((</span><br><span class="line">    [memberInfo], [orderInfo]</span><br><span class="line">)&#x3D;&gt;&#123;    </span><br><span class="line">    &#x2F;&#x2F;这里用到了解构赋值来取得http返回的数据</span><br><span class="line">    console.log(&#39;用户信息&#39;,memberInfo);</span><br><span class="line">    console.log(&#39;订单信息&#39;,orderInfo);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>想要了解更多关于延迟对象的内容，可以访问阮一峰的博客除了上面这一个问题，还可以追问一些下面的问题，这里就不展开解答了：</p><ul><li>异步请求和同步请求的区别</li><li>ajax 请求有几种数据格式，如何设置数据格式</li><li>如何避免浏览器缓存get请求，以便达到每次get请求都能获取最新的数据</li><li>等等……</li></ul><h3 id="5-说一说你知道的HTTP状态码"><a href="#5-说一说你知道的HTTP状态码" class="headerlink" title="5.说一说你知道的HTTP状态码"></a><div style="padding-left: 1em; margin: 1em 0px; border-left: 4px solid rgb(211, 211, 211); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(133, 144, 166);">5.说一说你知道的HTTP状态码</h3><p>以前遇到面试者说 HTTP状态码不应该是前端开发关心的事情。但我总觉得一个前端工程师对于http状态码的了解程度代表了他曾经踩过了多少雷，一个深入了解http状态码的工程师可以快速定位问题。</p><p>关于HTTP状态码应该有下面的基本认识：</p><ul><li>1xx ：1开头的状态码表示临时的响应</li><li>2xx ：请求成功</li><li>3xx ：请求被重定向</li><li>4xx ：请求错误，表明客户端发送的请求有问题</li><li>5xx ：服务器错误，表明服务端在处理请求时发生了错误</li></ul><p>知道上面的规律，再看到错误的时候就大概知道问题是后端的锅还是前端的锅了。再说几个常用的http状态码（如果有兴趣了解详细的话还是自己去找吧，网上很多（<a href="http://tools.jb51.net/table/http_status_code））：">http://tools.jb51.net/table/http_status_code））：</a></p><pre><code>* 301 ： Moved Permanently 客户端请求的文档在其他地方，新的URL在location头中给出* 304 ： Not Modified 客户端有缓存的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户端只想到指定日期后再更新文档）。服务器告诉客户，原来缓存的文档还可以继续使用。* 400 ： Bad Request 请求出现语法错误* 401 ： Unauthorized 访问被拒绝，客户端试图未经授权访问受密码保护的页面* 403 ： Forbidden 资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器文件或目录的权限设置导致。* 404 ： Not Found 无法找到指定位置的资源。* 405 ： Method Not Allowed 请求方法（GET、POST、PUT等）对指定的资源不适用，用来访问本资源的HTTP方法不被允许。* 500 ： Internal Server Error 服务器遇到了意料之外的情况，不能完成客户端的请求。* 502 ： Bad Gateway 服务器作为网管或者代理时收到了无效的响应。* 503 ： Service Unavailable 服务不可用，服务器由于维护或者负载过中未能应答。* 504 ： Gateway Timeout 网关超时， 作为代理或网关的服务器不能及时的应答。</code></pre><h3 id="6-JSONP的原理JSONP是一种跨域共享资源的方法。"><a href="#6-JSONP的原理JSONP是一种跨域共享资源的方法。" class="headerlink" title="6.JSONP的原理JSONP是一种跨域共享资源的方法。"></a><div style="padding-left: 1em; margin: 1em 0px; border-left: 4px solid rgb(211, 211, 211); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(133, 144, 166);">6.JSONP的原理JSONP是一种跨域共享资源的方法。</h3><p>很多人会好奇JSONP和JSON是什么关系，JSONP是JSON with padding的缩写，即填充式JSON或参数式JSON，是被包含在函数调用中的JSON，如下面的样子：</p><p>callback({“name”: “Chong”});JSONP是通过动态<script>元素来实现的，使用时可以为src属性指定一个跨域URL。由于浏览器加载脚本是不受同源规则限制的，所以即使是跨域的URL同样可以发送请求。因为JSONP是有效的JavaScript代码，所以再请求完成后，即在JSONP响应加载到页面中以后，就会立即执行。示例代码：function handleResponse(response){alert(“您的IP地址是 “ + response.ip);}var script = document.createElement(“script”);script.src = “<a href="http://freegeoip.net/json/?callback=handleResponse&quot;;document.body.insertBefore">http://freegeoip.net/json/?callback=handleResponse&quot;;document.body.insertBefore</a>(script, document.body.firstChild);所以总结一下JSONP的实现方式：</p><pre><code>1. 向当前页面中动态插入一个&lt;script&gt;元素，src属性设置为请求地址，并在地址中指定好回调函数2. js代码中预先定义好jsonp的回调函数3. 请求完成后，会立即调用预先指定好的jsonp回调，并将数据以json的格式传递到回调中。</code></pre><p>JSONP之所以可以实现跨域，依赖的是下面的条件：</p><pre><code>1. 浏览器请求脚本是不受同源规则限制的2. &lt;script&gt;元素加载完成的脚本会立即执行</code></pre><p>需要注意的是，JSONP是需要服务端配合的，因为JSONP返回的是一段代码。7.跨域请求资源有哪几种方式？他们的优缺点是什么？常见的跨域方式如下：</p><pre><code>* JSONP* 图像Ping* CORS* Web Sockets</code></pre><p>一个一个说：JSONP优点：简单易用，浏览器支持好。缺点：</p><pre><code>1. JSONP是从其他域中加载代码并执行，所以存在很多安全隐患，如果其他服务器在响应中夹带恶意代码的话，没有办法防范。2. JSONP难以确定请求失败的情况。HTML5中给&lt;script&gt;元素增加了一个onerror事件，但是还是有浏览器不支持。3. 只能发送GET请求</code></pre><p>图像Ping这是指通过请求图片的方式来跨域发送请求。优点：简单，兼容性好，不需要服务器做针对性处理。缺点：</p><pre><code>1. 只能单向通信，即客户端发送信号给服务端，无法接收到服务端的回复2. 只能发送GET请求3. 容易被浏览器缓存请求，导致请求发送不出去。</code></pre><p>CORSCORS是Cross-Origin Resource Sharing的缩写，即跨域资源共享。CORS的基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。优点：功能强大缺点：</p><pre><code>1. 需要服务端来配合实现（其实很简单~）2. IE必须IE10以上。。。</code></pre><p>WebSocket这个貌似就不用多说了，属于没用过也应该听过的一种技术。优点：</p><pre><code>1. 双工通信，浏览器和服务器都可以发起请求2. 通信效率高，一次链接可以复用，省去反复的握手环节</code></pre><p>缺点：</p><pre><code>1. 实现上较为复杂，包括客户端和服务端2. 浏览器支持问题</code></pre><p>还有很多其他的跨域方式，在这里就不说了8.XML和JSON的区别？XML是标准通用标记语言 (SGML) 的子集，而标签语言（如HTML）的好处就是易懂。优点：上手简单，非开发人员也可以快速上手（产品经理们很喜欢）。缺点：</p><pre><code>1. XML多余的数据比较多，所以数据量大，传输时占用更多空间2. 客户端和服务端解析XML都要比较繁琐，需要大量代码</code></pre><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。重点在轻上，结构与JavaScript中的Object类似。优点：</p><pre><code>1. 数据量小，利于网络传输2. 方便解析，客户端和服务端都有基础的解析方法</code></pre><p>缺点：结构稍微有点复杂，非开发人员不容易上手（初学者需要去官网学习研究一下）</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;网络相关的知识也是面试时经常会被问到的问题，面试官很有必要确认面试者是否只会使用$.ajax()方法，还是真正了解网络请求的原理。问题列表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;get和post的区别&lt;/li&gt;
&lt;li&gt;websocket是否了解&lt;/li&gt;
&lt;li&gt;http 2.0对于http 1.x有哪些优点？&lt;/li&gt;
&lt;li&gt;jq的ajax返回值是什么？&lt;/li&gt;
&lt;li&gt;说一说你知道的HTTP状态码&lt;/li&gt;
&lt;li&gt;jsonp的原理&lt;/li&gt;
&lt;li&gt;跨域请求资源有哪几种方式？他们的优缺点是什么？&lt;/li&gt;
&lt;li&gt;XML和JSON的区别？
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue项目运行后，在IE浏览器打开，页面为空白</title>
    <link href="https://blueskyadd.github.io/2020/07/15/vue/"/>
    <id>https://blueskyadd.github.io/2020/07/15/vue/</id>
    <published>2020-07-15T05:42:15.000Z</published>
    <updated>2021-06-02T06:31:19.309Z</updated>
    
    <content type="html"><![CDATA[<p>解决方案：</p><h3>一、首先安装babel-polyfill</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure><a id="more"></a><h3>二、在main.js里引入<h3><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#39;babel-polyfill&#39;</span><br></pre></td></tr></table></figure><br><h3>三、在首页index.html中添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge,chrome&#x3D;1&quot;&gt;</span><br></pre></td></tr></table></figure><p><h3>四、配置项目文件</h3><br>build中的webpack.base.conf.js修改如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">entry:&#123;</span><br><span class="line">    app:[&#39;babel-polyfill&#39;,&#39;.&#x2F;src&#x2F;main.js&#39;]      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决方案：&lt;/p&gt;
&lt;h3&gt;一、首先安装babel-polyfill&lt;/h3&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save babel-polyfill&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>TS - interfaces  初探</title>
    <link href="https://blueskyadd.github.io/2020/07/15/ts-interfaces/"/>
    <id>https://blueskyadd.github.io/2020/07/15/ts-interfaces/</id>
    <published>2020-07-15T05:40:38.000Z</published>
    <updated>2021-03-17T10:46:50.270Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>interfaces英文翻译为<strong>接口</strong>，百度百科上解释为<strong>interface是面向对象编程语言中接口操作的关键字，功能是把所需成员组合起来，用来装封一定功能的集合</strong>。那么它在ts这个语言中究竟扮演怎样的角色，有什么用途。</p></blockquote><h2 id="interfaces-是什么"><a href="#interfaces-是什么" class="headerlink" title="interfaces 是什么"></a>interfaces 是什么</h2><p>理解起来 <strong>interfaces就是约定了一个编程的规范而已，它规定了要实现的一系列方法和属性</strong>。也就是说interface其实是一种描述对象或函数的东西，它是一种约束形式，比如一个对象需要有什么样的属性，函数需要什么参数或返回什么样的值，数组应该是什么样子的，一个类和继承类需要符合什么样的描述等等。</p><blockquote><p>了解了interface是什么，那么在不同的情况下我们怎么去使用interfaces呢？</p></blockquote><a id="more"></a><hr><h2 id="interfaces-怎么用"><a href="#interfaces-怎么用" class="headerlink" title="interfaces 怎么用"></a>interfaces 怎么用</h2><h4 id="对象-Interface"><a href="#对象-Interface" class="headerlink" title="对象 Interface"></a>对象 Interface</h4><ol><li>定义对象需要的属性</li><li>设置可选属性</li><li>设置只读属性</li><li>可以通过 as 或 [propName: string]: any 来定义对象属性的数据类型</li></ol><p>例子：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span>  people &#123;</span><br><span class="line">    Name : <span class="built_in">String</span>,</span><br><span class="line">    age:<span class="built_in">number</span>,</span><br><span class="line">    height?: <span class="built_in">number</span>,<span class="comment">//设置可选属性，可有可恶✅</span></span><br><span class="line">    <span class="keyword">readonly</span> gender:<span class="built_in">String</span>, <span class="comment">//设置只读属性✅</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> zhangSan:people = &#123;</span><br><span class="line">    Name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age:<span class="number">1</span>,</span><br><span class="line">    gender:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">zhangSan.gender = <span class="string">&quot;女&quot;</span><span class="comment">//报错，只读属性不可修改 ❌</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="函数-Interface"><a href="#函数-Interface" class="headerlink" title="函数 Interface"></a>函数 Interface</h4><ol><li>定义函数接口</li><li>定义函数入参的类型</li><li>使用函数表达式</li><li>调用函数，写入出参</li></ol><p>例子：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Fun &#123;(</span><br><span class="line">    x:<span class="built_in">string</span>,<span class="comment">//定义函数接收的第一个必选参数为string类型✅</span></span><br><span class="line">    y:<span class="built_in">number</span>,<span class="comment">//定义函数接收的第二个必选参数为number类型✅</span></span><br><span class="line">    z?:<span class="built_in">boolean</span>,<span class="comment">//定义函数接收的第三个可选参数为boolean类型✅</span></span><br><span class="line">)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add: Fun = <span class="function"><span class="keyword">function</span> (<span class="params">x:<span class="built_in">string</span>, y:<span class="built_in">number</span>, z = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y, z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;张三&#x27;</span>,<span class="number">12</span>)</span><br></pre></td></tr></table></figure></p><h4 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h4><p>我们也可以描述那些能够“通过索引得到”的类型，例如arr[0]。可索引类型具有一个<strong>索引签名</strong>，它描述了对象索引的类型，还有相应的索引返回值类型。</p><ol><li>定义一个可索引类型 </li><li>设置索引类型</li><li>定义数组调用该规范</li></ol><p>例子：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [index: <span class="built_in">number</span>]:<span class="built_in">string</span>, <span class="comment">//❗ 需要注意的是 index 只能为 number 类型或 string 类型</span></span><br><span class="line">    length: <span class="built_in">number</span> <span class="comment">//指定属性👀</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1: StringArray = [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>] </span><br><span class="line"></span><br><span class="line">arr1[<span class="number">1</span>] = <span class="string">&quot;4&quot;</span> <span class="comment">// ❌ 由于索引设置为只读属性，arr1[1]不能赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr: StringSet = [<span class="number">23</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">21</span>] <span class="comment">// ❌ 数组应为 string 类型</span></span><br></pre></td></tr></table></figure></p><h4 id="类-Interface"><a href="#类-Interface" class="headerlink" title="类 Interface"></a>类 Interface</h4><blockquote><p>实现（implements）是面向对象中的一个重要概念。一个类只能继承自另一个类，不同类之间可以有一些共有的特性，就可以把特性提取成接口（interfaces），用 implements 关键字来实现。</p></blockquote><p>Interface 也可以用来定义一个类的规范。需要注意的是类 Interface 只会检查实例的属性，静态属性是需要额外定义一个 Interface；<br>例如：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ? PersonConstructor 是用来检查静态部分的</span></span><br><span class="line"><span class="keyword">interface</span> PersonConstructor &#123;</span><br><span class="line">    <span class="keyword">new</span> (name: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>) <span class="comment">// ✔️ 这个是用来检查 constructor 的</span></span><br><span class="line">    typename: <span class="built_in">string</span> <span class="comment">// ✔️ 这个是用来检查静态属性 typename 的</span></span><br><span class="line">    logname(): <span class="built_in">void</span> <span class="comment">// ✔️ 这个用来检查静态方法 logname 的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ? PersonInterface 则是用来检查实例部分的</span></span><br><span class="line"><span class="keyword">interface</span> PersonInterface &#123;</span><br><span class="line">    <span class="comment">// new (name: string, age: number) // ❌ 静态方法的检查也不能写在这里 这样写是错误的</span></span><br><span class="line">    log(): <span class="built_in">void</span> <span class="comment">// : 这里定义了实例方法 log</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Person implements PersonInterface, PersonInterface &#123; ❌ 这样写是错误的</span></span><br><span class="line"><span class="keyword">const</span> Person: PersonConstructor = <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">PersonInterface</span> </span>&#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">static</span> typename = <span class="string">&#x27;Person type&#x27;</span> <span class="comment">// 这里定义了一个名为 typename 的静态属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">logname</span>(<span class="params"></span>)</span> &#123; <span class="comment">// 这里定义了一个名为 logname 的静态方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.typename)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123; <span class="comment">// constructor 也是静态方法</span></span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">log</span>(<span class="params"></span>)</span> &#123; <span class="comment">// log 是实例方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="接口间的继承"><a href="#接口间的继承" class="headerlink" title="接口间的继承"></a>接口间的继承</h4><ul><li>接口可以通过其他接口来扩展自己。</li><li>Typescript 允许接口继承多个接口。</li><li>继承使用关键字 extends。</li></ul><h5 id="1-单接口继承"><a href="#1-单接口继承" class="headerlink" title="1. 单接口继承"></a>1. 单接口继承</h5><p>extends 关键字后加继承的接口<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>,</span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Students <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  gender: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo: Students = &#123;</span><br><span class="line">  name: <span class="string">&#x27;why&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  gender: <span class="string">&#x27;female&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2-多接口继承"><a href="#2-多接口继承" class="headerlink" title="2. 多接口继承"></a>2. 多接口继承</h5><p>多接口之间逗号分隔<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Sing &#123;</span><br><span class="line">  sing(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Jump &#123;</span><br><span class="line">  jump(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Rap <span class="keyword">extends</span> Sing, Jump &#123;</span><br><span class="line">  rap(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo: Rap = &#123;</span><br><span class="line">  <span class="function"><span class="title">sing</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">jump</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">rap</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="3-接口继承类"><a href="#3-接口继承类" class="headerlink" title="3. 接口继承类"></a>3. 接口继承类</h5><p>常见的面向对象语言中，接口是不能继承类的，但是在 TypeScript 中却是可行的<br>用extends关键字继承类<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  run(): <span class="built_in">void</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> User <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  gender: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo: User = &#123;</span><br><span class="line">  name: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  gender: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  run():<span class="built_in">void</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>友情链接：<br><a href="https://blog.csdn.net/qdmoment/article/details/82496685">es6中class类静态方法，静态属性理解，实例属性，实例方法理解</a><br><a href="https://blog.csdn.net/qq_15037231/article/details/82813140">extends和implements区别</a></p><hr><p>参考资料<br><a href="https://www.jianshu.com/p/099c5683ffb5">https://www.jianshu.com/p/099c5683ffb5</a><br><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Interfaces.html">https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Interfaces.html</a><br><a href="https://cloud.tencent.com/developer/article/1411764">https://cloud.tencent.com/developer/article/1411764</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;interfaces英文翻译为&lt;strong&gt;接口&lt;/strong&gt;，百度百科上解释为&lt;strong&gt;interface是面向对象编程语言中接口操作的关键字，功能是把所需成员组合起来，用来装封一定功能的集合&lt;/strong&gt;。那么它在ts这个语言中究竟扮演怎样的角色，有什么用途。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;interfaces-是什么&quot;&gt;&lt;a href=&quot;#interfaces-是什么&quot; class=&quot;headerlink&quot; title=&quot;interfaces 是什么&quot;&gt;&lt;/a&gt;interfaces 是什么&lt;/h2&gt;&lt;p&gt;理解起来 &lt;strong&gt;interfaces就是约定了一个编程的规范而已，它规定了要实现的一系列方法和属性&lt;/strong&gt;。也就是说interface其实是一种描述对象或函数的东西，它是一种约束形式，比如一个对象需要有什么样的属性，函数需要什么参数或返回什么样的值，数组应该是什么样子的，一个类和继承类需要符合什么样的描述等等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;了解了interface是什么，那么在不同的情况下我们怎么去使用interfaces呢？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="ts" scheme="https://blueskyadd.github.io/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>promise的简单理解</title>
    <link href="https://blueskyadd.github.io/2020/04/21/promise/"/>
    <id>https://blueskyadd.github.io/2020/04/21/promise/</id>
    <published>2020-04-21T07:09:08.000Z</published>
    <updated>2020-04-22T07:35:54.551Z</updated>
    
    <content type="html"><![CDATA[<h4 id="promise的基本语法"><a href="#promise的基本语法" class="headerlink" title="promise的基本语法"></a>promise的基本语法</h4><blockquote><p>新建一个promise很简单，只需要new一个promise对象即可。所以promise本质上就是一个函数，它接受一个函数作为参数，并且会返回promise对象，这就给链式调用提供了基础。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new Promise(function(resolve, reject) &#123;</span><br><span class="line"> &#x2F;&#x2F;待处理的异步逻辑</span><br><span class="line"> &#x2F;&#x2F;处理结束后，调用resolve或reject方法</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="promise的几种状态"><a href="#promise的几种状态" class="headerlink" title="promise的几种状态"></a>promise的几种状态</h4><p> 其实Promise函数的使命，就是构建出它的实例，并且负责帮我们管理这些实例。而这些实例有以下三种状态：</p><pre><code>1. pending: 初始状态，位履行或拒绝2. fulfilled: 意味着操作成功完成3. rejected: 意味着操作失败</code></pre><blockquote><p>pending 状态的 Promise对象可能以fulfilled状态返回了一个值，也可能被某种理由（异常信息）拒绝（reject）了。当其中任一种情况出现时，Promise 对象的then方法绑定的处理方法（handlers）就会被调用，then方法分别指定了resolve方法和reject方法的回调函数</p></blockquote><h4 id="几种状态的深入理解"><a href="#几种状态的深入理解" class="headerlink" title="几种状态的深入理解"></a>几种状态的深入理解</h4><ul><li>一个promise可能有三种状态：等待（pending）、已完成（fulfilled）、已拒绝（rejected）</li><li>一个promise的状态只可能从“等待”转到“完成”态或者“拒绝”态，不能逆向转换，同时“完成”态和“拒绝”态不能相互转换</li><li>promise必须实现then方法（可以说，then就是promise的核心），而且then必须返回一个promise，同一个promise的then可以调用多次，并且回调的执行顺序跟它们被定义时的顺序一致</li><li>then方法接受两个参数，第一个参数是成功时的回调，在promise由“等待”态转换到“完成”态时调用，另一个是失败时的回调，在promise由“等待”态转换到“拒绝”态时调用。同时，then可以接受另一个promise传入，也接受一个“类then”的对象或方法，即thenable对象。</li></ul><h4 id="promise缺点"><a href="#promise缺点" class="headerlink" title="promise缺点"></a>promise缺点</h4><ul><li>一旦新建它就会立即执行，无法中途取消</li><li>如果不设置回调函数，Promise内部抛出的错误，不会反应到外部</li><li>当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;promise的基本语法&quot;&gt;&lt;a href=&quot;#promise的基本语法&quot; class=&quot;headerlink&quot; title=&quot;promise的基本语法&quot;&gt;&lt;/a&gt;promise的基本语法&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;新建一个promise很简单，只需
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>react基础（一）</title>
    <link href="https://blueskyadd.github.io/2020/04/13/react%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://blueskyadd.github.io/2020/04/13/react%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-04-13T05:17:41.000Z</published>
    <updated>2021-06-02T06:22:46.040Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h4><blockquote><p>react 作为目前前端的主流框架，各大公司也都在使用。react是一套基于视图层的框架，核心库只关注于视图层，跟vue一致（vue参照了react）。react专注于组件化开发，使用jsx语法（javascript xml  – 类xml语法—-要求所有写的视图代码必须包含在同一个父级标签中—-vue中的template），内涵虚拟DOM（ 所有内容并不是一开始就写到了index.html中，使用jsx语法构建，最后渲染到了index.html页面中），使用diff算法（ 状态的改变，会引起视图的二次渲染，比较状态树变化的算法），会比vue更加适合团队开发模式，以至于react成了一项必备技能。我个人其实是一直在使用vue，不过为了迎合市场也开始了react的学习之路，接下来我会将<strong>react</strong>、<strong>redux</strong>、<strong>react-router</strong>一步一步来进行整理。</p></blockquote><!-- <img src="./img/backgroundImg/4.jpg" width="850" hegiht="313" align=center /> --><h3>01-构建项目</h3><h4 id="01-1-create-react-app-快速构建项目"><a href="#01-1-create-react-app-快速构建项目" class="headerlink" title="01-1 create-react-app 快速构建项目"></a>01-1 create-react-app 快速构建项目</h4><h5 id="creat-react-app优点"><a href="#creat-react-app优点" class="headerlink" title="creat-react-app优点"></a>creat-react-app优点</h5><ul><li>无需配置：官方的配置堪称完美，几乎不用你再配置任何东西，就可以上手开发项目。</li><li>高集成性：集成了对React，JSX，ES6和Flow的支持。</li><li>自带服务：集成了开发服务器，你可以实现开发预览一体化。</li><li>热更新：保存自动更新，让你的开发更简单。</li><li>全兼容性：自动处理CSS的兼容问题，无需添加-webkit前缀。</li><li>自动发布：集成好了发布成品功能，编译后直接发布，并且包含了sourcemaps功能。</li></ul><h5 id="creat-react-app的安装"><a href="#creat-react-app的安装" class="headerlink" title="creat-react-app的安装"></a>creat-react-app的安装</h5><p> windows系统下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="创建react项目"><a href="#创建react项目" class="headerlink" title="创建react项目"></a>创建react项目</h5><p>安装完成后，就可以使用create-react-app来生成react项目的项目目录– projectName：项目名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app projectName</span><br></pre></td></tr></table></figure><h5 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h5><p>然后进入到项目内 通过npm来安装项目依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h4 id="01-2-generator-react-webpack-快速构建项目"><a href="#01-2-generator-react-webpack-快速构建项目" class="headerlink" title="01-2 generator-react-webpack 快速构建项目"></a>01-2 generator-react-webpack 快速构建项目</h4><p>我也是第一次使用它，各种百度后发现它其实是基于webpack构建的，只不过是进一步完善了webpack，它可以支持ES6，并且集成了Babel-Loader等。简单来说使用它之后省去了我们自己手动配置webpack,对于我这种不熟悉webpack配置的小白来说极其方便。</p><h5 id="generator-react-webpack优点"><a href="#generator-react-webpack优点" class="headerlink" title="generator-react-webpack优点"></a>generator-react-webpack优点</h5><ul><li>基于webpack构建，可以很容易的配置自己需要的webpack。</li><li>支持ES6，集成了Babel-Loader。</li><li>支持不同风格的CSS（sass，less，stylus）。</li><li>支持PostCSS转换样式。</li><li>集成了esLint功能。</li><li>可以轻松配置单元测试，比如Karma和Mocha</li><li>包含热加载</li></ul><h5 id="generator-react-webpack的安装"><a href="#generator-react-webpack的安装" class="headerlink" title="generator-react-webpack的安装"></a>generator-react-webpack的安装</h5><h5 id="在全局安装yeoman-和-generator-react-webpack"><a href="#在全局安装yeoman-和-generator-react-webpack" class="headerlink" title="在全局安装yeoman  和 generator-react-webpack"></a>在全局安装yeoman  和 generator-react-webpack</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo</span><br><span class="line">npm install -g generator-react-webpack</span><br></pre></td></tr></table></figure><h5 id="初始化项目目录，使用generator-react-webpack生成项目目录"><a href="#初始化项目目录，使用generator-react-webpack生成项目目录" class="headerlink" title="初始化项目目录，使用generator-react-webpack生成项目目录"></a>初始化项目目录，使用generator-react-webpack生成项目目录</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir react_demo</span><br><span class="line">cd react_deom</span><br><span class="line">yo react-webpack</span><br></pre></td></tr></table></figure><h5 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h4 id="react项目目录介绍"><a href="#react项目目录介绍" class="headerlink" title="react项目目录介绍"></a>react项目目录介绍</h4><p><img src="<https://blueskyadd.github.io/myPicture/react/1.png" width="550" hegiht="313" align=center> </p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;react 作为目前前端的主流框架，各大公司也都在使用。react是一套基于视图层的框架，核心库只关注于视图层，跟vue一致（vue参照了react）。react专注于组件化开发，使用jsx语法（javascript xml  – 类xml语法—-要求所有写的视图代码必须包含在同一个父级标签中—-vue中的template），内涵虚拟DOM（ 所有内容并不是一开始就写到了index.html中，使用jsx语法构建，最后渲染到了index.html页面中），使用diff算法（ 状态的改变，会引起视图的二次渲染，比较状态树变化的算法），会比vue更加适合团队开发模式，以至于react成了一项必备技能。我个人其实是一直在使用vue，不过为了迎合市场也开始了react的学习之路，接下来我会将&lt;strong&gt;react&lt;/strong&gt;、&lt;strong&gt;redux&lt;/strong&gt;、&lt;strong&gt;react-router&lt;/strong&gt;一步一步来进行整理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- &lt;img src=&quot;./img/backgroundImg/4.jpg&quot; width=&quot;850&quot; hegiht=&quot;313&quot; align=center /&gt; --&gt;
&lt;h3&gt;01-构建项目&lt;/h3&gt;

&lt;h4 id=&quot;01-1-create-react-app-快速构建项目&quot;&gt;&lt;a href=&quot;#01-1-create-react-app-快速构建项目&quot; class=&quot;headerlink&quot; title=&quot;01-1 create-react-app 快速构建项目&quot;&gt;&lt;/a&gt;01-1 create-react-app 快速构建项目&lt;/h4&gt;&lt;h5 id=&quot;creat-react-app优点&quot;&gt;&lt;a href=&quot;#creat-react-app优点&quot; class=&quot;headerlink&quot; title=&quot;creat-react-app优点&quot;&gt;&lt;/a&gt;creat-react-app优点&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;无需配置：官方的配置堪称完美，几乎不用你再配置任何东西，就可以上手开发项目。&lt;/li&gt;
&lt;li&gt;高集成性：集成了对React，JSX，ES6和Flow的支持。&lt;/li&gt;
&lt;li&gt;自带服务：集成了开发服务器，你可以实现开发预览一体化。&lt;/li&gt;
&lt;li&gt;热更新：保存自动更新，让你的开发更简单。&lt;/li&gt;
&lt;li&gt;全兼容性：自动处理CSS的兼容问题，无需添加-webkit前缀。&lt;/li&gt;
&lt;li&gt;自动发布：集成好了发布成品功能，编译后直接发布，并且包含了sourcemaps功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;creat-react-app的安装&quot;&gt;&lt;a href=&quot;#creat-react-app的安装&quot; class=&quot;headerlink&quot; title=&quot;creat-react-app的安装&quot;&gt;&lt;/a&gt;creat-react-app的安装&lt;/h5&gt;&lt;p&gt; windows系统下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g create-react-app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Element-ui Cascader 级联选择器 同时返回 value 和 label</title>
    <link href="https://blueskyadd.github.io/2020/02/16/label/"/>
    <id>https://blueskyadd.github.io/2020/02/16/label/</id>
    <published>2020-02-16T03:29:57.000Z</published>
    <updated>2020-04-13T05:41:51.525Z</updated>
    
    <content type="html"><![CDATA[<p>给 cascader 组件赋值一个别名 ref=”cityData”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-cascader</span><br><span class="line">     ref&#x3D;&quot;cityData&quot;</span><br><span class="line">     placeholder&#x3D;&quot;请输入所属区域&quot;</span><br><span class="line">     :options&#x3D;&quot;options&quot;</span><br><span class="line">     v-model&#x3D;&quot;area&quot;</span><br><span class="line"> &gt;</span><br><span class="line"> &lt;&#x2F;el-cascader&gt;</span><br></pre></td></tr></table></figure><p>在 2.9.2 后官方新增了 getCheckedNodes() <a href="https://element.eleme.cn/#/zh-CN/component/cascader#cascader-methods">方法 </a></p><p>该方法返回选中节点的 array，如果是单选的话，使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$refs.cityData.getCheckedNodes()[0].pathLabels </span><br></pre></td></tr></table></figure></p><p>ps: 城市JS <a href="">点击下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给 cascader 组件赋值一个别名 ref=”cityData”&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
    
    
      <category term="Element-ui" scheme="https://blueskyadd.github.io/tags/Element-ui/"/>
    
      <category term="vue" scheme="https://blueskyadd.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>node入门(三) -如何使用node上传图像到服务器</title>
    <link href="https://blueskyadd.github.io/2019/12/16/threeNode/"/>
    <id>https://blueskyadd.github.io/2019/12/16/threeNode/</id>
    <published>2019-12-16T07:51:37.000Z</published>
    <updated>2020-04-13T07:37:44.231Z</updated>
    
    <content type="html"><![CDATA[<p>一、首先配置MongoDB，在node中连接<br>(1):下载安装MongoDb<br>    官方下载链接： <a href="https://www.mongodb.com/download-center#community">下载地址</a><br>    下载 Windows 64-bit x64 msi 格式的，完事直接傻瓜式安装（切记记住安装位置）。<br>    为了方便使用，可以下载一个mongodb的可视化工具，Robo 3T.(下方有下载地址)<br>    <strong><br>        链接：<a href="https://pan.baidu.com/s/16Jr6ezRuM0y9KM5CppUEwg">https://pan.baidu.com/s/16Jr6ezRuM0y9KM5CppUEwg</a><br>        提取码：bqnh<br>    </strong><br>    下载完成后，先打开mongodb的安装目录,打开bin文件夹然后双击<strong style="color='blue'">mongod.exe</strong>，<br>    <img src="https://blueskyadd.github.io/myPicture/node/7.jpg" width="550" hegiht="313" align=center></p><p>运行成功后打开浏览器，输入127.0.0.1:27017如果看到下图提示则表示<br><img src="https://blueskyadd.github.io/myPicture/node/8.jpg" width="550" hegiht="313" align=center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、首先配置MongoDB，在node中连接&lt;br&gt;(1):下载安装MongoDb&lt;br&gt;    官方下载链接： &lt;a href=&quot;https://www.mongodb.com/download-center#community&quot;&gt;下载地址&lt;/a&gt;&lt;br&gt;    下载 W
      
    
    </summary>
    
    
    
      <category term="node" scheme="https://blueskyadd.github.io/tags/node/"/>
    
      <category term="mongodb" scheme="https://blueskyadd.github.io/tags/mongodb/"/>
    
      <category term="express" scheme="https://blueskyadd.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>node入门(二) -浅析Express开发框架</title>
    <link href="https://blueskyadd.github.io/2019/10/25/nodeTwo/"/>
    <id>https://blueskyadd.github.io/2019/10/25/nodeTwo/</id>
    <published>2019-10-25T07:05:06.000Z</published>
    <updated>2019-12-23T09:26:10.082Z</updated>
    
    <content type="html"><![CDATA[<p>如果想用node快速的搭建一个WEB站点，那么可以选择Express 框架，Express是基于 Node.js 平台，快速、开放、极简的 Web 开发框架.</p><p><h3>一、初始化安装Express</h3></p><h5 id="1-全局安装Express"><a href="#1-全局安装Express" class="headerlink" title="(1)全局安装Express"></a>(1)全局安装Express</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-generator -g</span><br></pre></td></tr></table></figure><p><strong>安装的时候有的可能会报错，原因是没有node的操作权限。解决此问题要以管理员身份运行cmd，执行下列代码。</strong><br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><br>然后选择’全是’</p><h5 id="2-然后运行-h就可以列出所有可用的命令行参数："><a href="#2-然后运行-h就可以列出所有可用的命令行参数：" class="headerlink" title="(2)然后运行-h就可以列出所有可用的命令行参数："></a>(2)然后运行-h就可以列出所有可用的命令行参数：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express -h</span><br></pre></td></tr></table></figure><h5 id="3-然后运行下面代码创建名为‘myapp’的项目"><a href="#3-然后运行下面代码创建名为‘myapp’的项目" class="headerlink" title="(3)然后运行下面代码创建名为‘myapp’的项目"></a>(3)然后运行下面代码创建名为‘myapp’的项目</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express --view=pug myapp</span><br></pre></td></tr></table></figure><h4 id="4-安装项目依赖并运行项目"><a href="#4-安装项目依赖并运行项目" class="headerlink" title="(4)安装项目依赖并运行项目"></a>(4)安装项目依赖并运行项目</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd myapp</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>至此输入<a href="http://localhost:3000/#/">http://localhost:3000/#/</a>   项目就运行起来了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果想用node快速的搭建一个WEB站点，那么可以选择Express 框架，Express是基于 Node.js 平台，快速、开放、极简的 Web 开发框架.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;一、初始化安装Express&lt;/h3&gt;&lt;/p&gt;
&lt;h5 id=&quot;1-全局安装Express&quot;&gt;&lt;a href=&quot;#1-全局安装Express&quot; class=&quot;headerlink&quot; title=&quot;(1)全局安装Express&quot;&gt;&lt;/a&gt;(1)全局安装Express&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install express-generator -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;安装的时候有的可能会报错，原因是没有node的操作权限。解决此问题要以管理员身份运行cmd，执行下列代码。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tags" scheme="https://blueskyadd.github.io/categories/tags/"/>
    
    
      <category term="node" scheme="https://blueskyadd.github.io/tags/node/"/>
    
      <category term="Express" scheme="https://blueskyadd.github.io/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>node入门(一) -node的简单理解</title>
    <link href="https://blueskyadd.github.io/2019/09/20/nativeEquipment/"/>
    <id>https://blueskyadd.github.io/2019/09/20/nativeEquipment/</id>
    <published>2019-09-20T03:40:17.000Z</published>
    <updated>2021-06-02T06:47:22.381Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始学习前端的时候接触过一点node,不过技术这种东西，一段时间不用就忘光了。现在想着重新捡起来，慢慢的从头开始看一下。<br>打算借助node 的 Express框架来学习,</p><p><h4>一、什么是node</h4><br>百度搜一下node百度百科上很清晰的写着：Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。node.js就是把浏览器的解释器封装起来作为服务器运行平台，用类似javascript的结构语法进行编程，在node.js上运行。<strong>简而言之，Node 为我们提供了一个无需依赖浏览器、能够直接与操作系统进行交互的 JavaScript 代码运行环境！</strong><br><a id="more"></a></p><p><h4>二、为什么要学习node</h4><br>其实前端要想走向全栈，必须是要接触后端语言的。那么对于前端来说，node时最合适的，虽然用node来做大型项目也是不现实的的，但是自己做一个小网站是绝对够用的。</p><p><h4>三、node可以用来做什么</h4><br>可以帮助我们快速搭建站点，而且轻量级的特点。看到过一个技术文章降解的非常详细<a href="https://blog.csdn.net/wang_kai_7/article/details/88286429">nodejs可以用来做什么</a></p><p><h4>四、node的安装</h4></p><p><h5>(1):下载</h5><br>官方的下载地址<a href="https://nodejs.org/zh-cn/download/releases/">点击跳转</a>;官网有很多版本，不过并不推荐下载最新版本，可以根据需要自行下载；</p><p><h5>(2):安装</h5><br>步骤一:下载完成后双击安装包,显示如下页面,点击next.<br><img src="https://blueskyadd.github.io/myPicture/node/1.jpg" width="550" hegiht="313" align=center><br><br/><br>步骤二:勾选“I accept the terms in the License Agreement”同意许可协议，并单击Next下一步，出现如下界面：<br><img src="https://blueskyadd.github.io/myPicture/node/2.jpg" width="550" hegiht="313" align=center><br><br/><br>步骤三:Node.js默认安装路径为“C:\Program Files\nodejs\”，你可以修改，在这里我改到了D盘，单击Next.不过最好默认路径免去一些麻烦<br><img src="https://blueskyadd.github.io/myPicture/node/3.jpg" width="550" hegiht="313" align=center><br><br/><br>步骤四：这里我直接默认Next下一步，准备就绪，准备安装：<br><img src="https://blueskyadd.github.io/myPicture/node/4.jpg" width="550" hegiht="313" align=center><br><br/><br>步骤五：确认无误后，点击Install，开始安装：<br><img src="https://blueskyadd.github.io/myPicture/node/5.jpg" width="550" hegiht="313" align=center><br><br/><br>步骤六：半分钟后，安装完成，点击Finish即可<br><img src="https://blueskyadd.github.io/myPicture/node/6.jpg" width="550" hegiht="313" align=center><br><br/><br>步骤七：最后运行node -v可查看node版本</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始学习前端的时候接触过一点node,不过技术这种东西，一段时间不用就忘光了。现在想着重新捡起来，慢慢的从头开始看一下。&lt;br&gt;打算借助node 的 Express框架来学习,&lt;/p&gt;
&lt;p&gt;&lt;h4&gt;一、什么是node&lt;/h4&gt;&lt;br&gt;百度搜一下node百度百科上很清晰的写着：Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。node.js就是把浏览器的解释器封装起来作为服务器运行平台，用类似javascript的结构语法进行编程，在node.js上运行。&lt;strong&gt;简而言之，Node 为我们提供了一个无需依赖浏览器、能够直接与操作系统进行交互的 JavaScript 代码运行环境！&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
    
      <category term="node" scheme="https://blueskyadd.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>手机网页版微信分享以及微信授权</title>
    <link href="https://blueskyadd.github.io/2019/08/29/weixinSherch/"/>
    <id>https://blueskyadd.github.io/2019/08/29/weixinSherch/</id>
    <published>2019-08-29T00:43:57.000Z</published>
    <updated>2019-12-23T09:27:28.474Z</updated>
    
    <content type="html"><![CDATA[<p>微信分享，第一次接触会发现很多坑。网页版微信分享是不支持按钮去分享的，只能通过微信右上角的按钮去分享。通过按钮分享的目前只支持APP。其实这样一来H5的分享就简单了很多。只需要调用微信官方出的微信jssdk，加上些许配置，就可以实现h5页面在微信上的分享，点击进入<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html">官方api文档</a>;<br><strong>注意：这里使用的都是微信官方最新的文档</strong></p><h3>一、首先获取配置所需要的参数</h3><p>首先使用已有公众号的appid，然后根据这个appid和url向后端发起请求，拿到配置所需要的参数：timestamp( 时间戳)、noncestr(随机字符串)和signature(签名)。<br/><br><strong>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用</strong></p><h3>二、项目引入微信jssdk</h3><p><h5>引入方式有两种，各取所需：</h5><br>(1)、通过导入依赖包<br>首先通过npm 安装依赖<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S weixin-js-sdk</span><br></pre></td></tr></table></figure><br><a id="more"></a><br>然后在页面中引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx <span class="keyword">from</span> <span class="string">&#x27;weixin-js-sdk&#x27;</span></span><br></pre></td></tr></table></figure></p><p>(2)通过script标签，引入微信官网的JS-SDK文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://res.wx.qq.com/open/js/jweixin-1.4.0.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><h3>三、通过config接口注入权限验证配置</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">     debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式</span></span><br><span class="line">     appId: data.appId, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">     timestamp: data.timestamp, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">     nonceStr: data.nonceStr, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">     signature: data.signature, <span class="comment">// 必填，签名</span></span><br><span class="line">     jsApiList: [</span><br><span class="line">         <span class="string">&#x27;updateTimelineShareData&#x27;</span>,<span class="comment">//自定义“分享到朋友圈”及“分享到QQ空间”按钮的分享内容（1.4.0）</span></span><br><span class="line">         <span class="string">&#x27;updateAppMessageShareData&#x27;</span>,<span class="comment">//自定义“分享给朋友”及“分享到QQ”按钮的分享内容（1.4.0）</span></span><br><span class="line">     ] <span class="comment">// 必填</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p><p><h3>四、分享</h3><br><strong>原有的 wx.onMenuShareTimeline、wx.onMenuShareAppMessage、wx.onMenuShareQQ、wx.onMenuShareQZone 接口，即将废弃。这里只介绍最新的 wx.updateAppMessageShareData、wx.updateTimelineShareData接口。</strong><br><br/></p><p><h5>(1)自定义“分享给朋友”及“分享到QQ”按钮的分享内容（1.4.0）</h5><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     wx.updateAppMessageShareData(&#123;</span><br><span class="line">         title: option.title, <span class="comment">// 分享标题</span></span><br><span class="line">         desc: option.desc, <span class="comment">// 分享描述</span></span><br><span class="line">         link: option.link, <span class="comment">// 分享链接</span></span><br><span class="line">         imgUrl: option.imgUrl, <span class="comment">// 分享图标</span></span><br><span class="line">         success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><br><br/></p><p><h5>(2)自定义“分享到朋友圈”及“分享到QQ空间”按钮的分享内容（1.4.0）</h5><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     wx.updateTimelineShareData(&#123;</span><br><span class="line">         title: option.title, <span class="comment">// 分享标题</span></span><br><span class="line">         link: option.link, <span class="comment">// 分享链接</span></span><br><span class="line">         imgUrl: option.imgUrl, <span class="comment">// 分享图标</span></span><br><span class="line">         desc: option.desc, <span class="comment">// 分享描述</span></span><br><span class="line">         success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">             <span class="comment">// 用户成功分享后执行的回调函数</span></span><br><span class="line">             _this.$http.post(_this.$conf.env.updateShareCount, params).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">                 alert(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">             &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;    </span><br><span class="line">             &#125;)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p><p><h3>五、遇到的问题</h3></p><p><h5>(1)微信分享途中如果取消分享后走的成功回调,无法识别是否分享成功</h5><br>这个问题确实是存在的，最后发现是微信官方做出的调整，本题无解，官方也有给出解释<a href="https://open.weixin.qq.com/cgi-bin/announce?spm=a311a.9588098.0.0&amp;action=getannouncement&amp;key=11534138374cE6li&amp;version=">点击查看</a></p><p><h5>(2)微信JS-SDK加载尚未完成，用户就点击分享，这时分享出去的页面没有标题和内容</h5><br>我有尝试在加载尚未完成时去禁止用户点击右上角分享按钮，但是用户体验很差，最后无疾而终</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信分享，第一次接触会发现很多坑。网页版微信分享是不支持按钮去分享的，只能通过微信右上角的按钮去分享。通过按钮分享的目前只支持APP。其实这样一来H5的分享就简单了很多。只需要调用微信官方出的微信jssdk，加上些许配置，就可以实现h5页面在微信上的分享，点击进入&lt;a href=&quot;https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html&quot;&gt;官方api文档&lt;/a&gt;;&lt;br&gt;&lt;strong&gt;注意：这里使用的都是微信官方最新的文档&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;一、首先获取配置所需要的参数&lt;/h3&gt;

&lt;p&gt;首先使用已有公众号的appid，然后根据这个appid和url向后端发起请求，拿到配置所需要的参数：timestamp( 时间戳)、noncestr(随机字符串)和signature(签名)。&lt;br/&gt;&lt;br&gt;&lt;strong&gt;所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;二、项目引入微信jssdk&lt;/h3&gt;

&lt;p&gt;&lt;h5&gt;引入方式有两种，各取所需：&lt;/h5&gt;&lt;br&gt;(1)、通过导入依赖包&lt;br&gt;首先通过npm 安装依赖&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i -S weixin-js-sdk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
    
    </summary>
    
    
    
      <category term="微信" scheme="https://blueskyadd.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="H5" scheme="https://blueskyadd.github.io/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>app沉浸式导航栏相关处理</title>
    <link href="https://blueskyadd.github.io/2019/08/28/tablebar/"/>
    <id>https://blueskyadd.github.io/2019/08/28/tablebar/</id>
    <published>2019-08-28T11:10:43.000Z</published>
    <updated>2020-04-13T07:53:25.877Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在移动端，很多的app都需要设置沉浸式导航栏，但是手机适配又成了一个很大的问题，所以通过获取手机状态栏高度，再增加页面padding的方法应该是最好的，可以适应各种妖孽手机，首先需要在HBuilder的配置文件中设置沉浸式导航，找到<strong>manifest.json<strong>文件下的<strong>plus<strong>对象，然后贴如下面代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;statusbar&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;immersed&quot;</span>: <span class="literal">true</span><span class="comment">/*沉浸式状态栏*/</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>下面代码片段是获取移动端状态栏高度的。<br><strong>注：此代码写在main.js中</strong><br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于plus模块需要加载，所以这里我使用了延时处理</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.plus)&#123;</span><br><span class="line">  <span class="comment">//首先判断当前设备是否支持沉浸式导航栏，如果不支持不做处理</span></span><br><span class="line">    <span class="keyword">var</span> isImmersedStatusbar = plus.navigator.isImmersedStatusbar();</span><br><span class="line">    <span class="keyword">if</span> (isImmersedStatusbar) &#123;</span><br><span class="line">        <span class="comment">//获取当前设备状态栏高度</span></span><br><span class="line">        <span class="keyword">var</span> StatusbarHeight = plus.navigator.getStatusbarHeight();</span><br><span class="line">        <span class="comment">//当前机型如果是iPhoneX，则在原基础上增加15像素。</span></span><br><span class="line">        <span class="comment">//获取到高度后在vue的原型上增加StatusbarHeight属性，方便后续使用</span></span><br><span class="line">        <span class="keyword">if</span> (plus.device.model.toString() == <span class="string">&#x27;iPhoneX&#x27;</span>) &#123;</span><br><span class="line">            Vue.prototype.$StatusbarHeight = StatusbarHeight + <span class="number">15</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Vue.prototype.$StatusbarHeight = StatusbarHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处设置了状态栏文字的颜色---dark为黑色/light为白色</span></span><br><span class="line">    plus.navigator.setStatusBarStyle(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line">    <span class="comment">//在处理结束后页面再出来，否则会出现抖动现象</span></span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      router,</span><br><span class="line">      store,</span><br><span class="line">      components: &#123; App &#125;,</span><br><span class="line">      template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><br>在获取到高度后，在app.vue页面来给#app增加padding值，这里一劳永逸型，哈哈。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:style=<span class="string">&quot;&#123;paddingTop:`$&#123;$StatusbarHeight&#125;px`&#125;&quot;</span></span><br></pre></td></tr></table></figure><br>如果有个别状态栏背景色不一样的，可以给#app动态添加class来解决，</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在移动端，很多的app都需要设置沉浸式导航栏，但是手机适配又成了一个很大的问题，所以通过获取手机状态栏高度，再增加页面padding的方法应该是最好的，可以适应各种妖孽手机，首先需要在HBuilder的配置文件中设置沉浸式导航，找到&lt;strong&gt;manifest.json&lt;strong&gt;文件下的&lt;strong&gt;plus&lt;strong&gt;对象，然后贴如下面代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;statusbar&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;immersed&amp;quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*沉浸式状态栏*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;下面代码片段是获取移动端状态栏高度的。&lt;br&gt;&lt;strong&gt;注：此代码写在main.js中&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="categories" scheme="https://blueskyadd.github.io/categories/categories/"/>
    
    
      <category term="vue" scheme="https://blueskyadd.github.io/tags/vue/"/>
    
      <category term="移动端" scheme="https://blueskyadd.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="HBuilder" scheme="https://blueskyadd.github.io/tags/HBuilder/"/>
    
  </entry>
  
  <entry>
    <title>调用手机扫描二维码功能</title>
    <link href="https://blueskyadd.github.io/2019/08/28/qrcode/"/>
    <id>https://blueskyadd.github.io/2019/08/28/qrcode/</id>
    <published>2019-08-28T10:36:02.000Z</published>
    <updated>2021-03-17T10:48:58.422Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>调用Hbuilder  二维码plus模块 来实现 二维码扫描功能,二维码的状态和使用最好在vuex中赋值，以方便控制。在mounted阶段调用下面代码片段<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">startRecognize</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.plus) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 使用vuex来创建scan二维码</span></span><br><span class="line">    that.$store.commit(<span class="string">&#x27;changescan&#x27;</span>, <span class="keyword">new</span> plus.barcode.Barcode(<span class="string">&#x27;qrcode&#x27;</span>))</span><br><span class="line">    <span class="comment">// 设置扫描之后的函数回调</span></span><br><span class="line">    that.$store.commit(<span class="string">&#x27;changeonmarked&#x27;</span>,onmarked)</span><br><span class="line">    <span class="comment">// 开始扫描</span></span><br><span class="line">    that.$store.commit(<span class="string">&#x27;staticScan&#x27;</span>)</span><br><span class="line">    <span class="comment">//设置扫描二维码页面样式，根据需求自行调整</span></span><br><span class="line">    barcode.setStyle(&#123;</span><br><span class="line">        background:<span class="string">&#x27;#8f9494&#x27;</span>,</span><br><span class="line">        height:<span class="string">&quot;100%&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//成功之后的函数回调</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onmarked</span>(<span class="params">type, result, file</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> plus.barcode.QR:</span><br><span class="line">            type = <span class="string">&#x27;QR&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> plus.barcode.EAN13:</span><br><span class="line">            type = <span class="string">&#x27;EAN13&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> plus.barcode.EAN8:</span><br><span class="line">            type = <span class="string">&#x27;EAN8&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            type = <span class="string">&#x27;其它&#x27;</span> + type</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获得扫描的二维码路径</span></span><br><span class="line">        result = result.replace(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment">//在data中设置变量codeUrl</span></span><br><span class="line">        that.codeUrl = result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>在退出二维码页面时需要将二维码扫描关闭，不然会一直在页面中显示<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;closeScan&#x27;</span>)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>下面是vuex 中的的调用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    scan:<span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">//创建</span></span><br><span class="line">  <span class="function"><span class="title">changescan</span>(<span class="params">state, data</span>)</span> &#123;</span><br><span class="line">    state.scan = data</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//成功回调</span></span><br><span class="line">  <span class="function"><span class="title">changeonmarked</span>(<span class="params">state, data</span>)</span>&#123;</span><br><span class="line">      state.scan.onmarked = data</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//开始扫描</span></span><br><span class="line">  <span class="function"><span class="title">staticScan</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      state.scan.start();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//关闭二维码</span></span><br><span class="line">  <span class="function"><span class="title">closeScan</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      state.scan.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><blockquote><p>另外在Android移动端需要控制物理返回键退出二维码页面,在APP.vue 的mounted阶段调用此函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">bindBack</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> vm = <span class="built_in">this</span>;</span><br><span class="line">   <span class="keyword">let</span> first = <span class="literal">null</span>;</span><br><span class="line">   plus.key.addEventListener(<span class="string">&quot;backbutton&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (</span><br><span class="line">         <span class="built_in">this</span>.$route.name == <span class="string">&quot;LabManagerIndex&quot;</span> ||</span><br><span class="line">         <span class="built_in">this</span>.$route.name == <span class="string">&quot;LogingIndex&quot;</span>||</span><br><span class="line">         <span class="built_in">this</span>.$route.name == <span class="string">&quot;gaugerIndex&quot;</span>||</span><br><span class="line">         <span class="built_in">this</span>.$route.name == <span class="string">&quot;EquipmentengineerIndex&quot;</span></span><br><span class="line">       ) &#123;</span><br><span class="line">       <span class="comment">//此处是需要直接退出app的页面路由</span></span><br><span class="line">         <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">           first = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">//记录第一次按下回退键的时间</span></span><br><span class="line">           plus.nativeUI.toast(<span class="string">&quot;再按一次退出应用&quot;</span>);</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="comment">//1s中后清除</span></span><br><span class="line">             first = <span class="literal">null</span>;</span><br><span class="line">           &#125;, <span class="number">2000</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - first &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">             <span class="comment">//如果两次按下的时间小于1s，</span></span><br><span class="line">             plus.runtime.quit(); <span class="comment">//那么就退出app</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.$route.name == <span class="string">&#x27;QRcodeIndex&#x27;</span>)&#123;</span><br><span class="line">       <span class="comment">//二维码页面</span></span><br><span class="line">          <span class="built_in">this</span>.$router.back(-<span class="number">1</span>)</span><br><span class="line">         <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;closeScan&#x27;</span>)</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.$router.back(-<span class="number">1</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;调用Hbuilder  二维码plus模块 来实现 二维码扫描功能,二维码的状态和使用最好在vuex中赋值，以方便控制。在mounted阶段调用下面代码片段&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;startRecognize&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; that = &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.plus) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 使用vuex来创建scan二维码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    that.$store.commit(&lt;span class=&quot;string&quot;&gt;&amp;#x27;changescan&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; plus.barcode.Barcode(&lt;span class=&quot;string&quot;&gt;&amp;#x27;qrcode&amp;#x27;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 设置扫描之后的函数回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    that.$store.commit(&lt;span class=&quot;string&quot;&gt;&amp;#x27;changeonmarked&amp;#x27;&lt;/span&gt;,onmarked)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 开始扫描&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    that.$store.commit(&lt;span class=&quot;string&quot;&gt;&amp;#x27;staticScan&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//设置扫描二维码页面样式，根据需求自行调整&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    barcode.setStyle(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background:&lt;span class=&quot;string&quot;&gt;&amp;#x27;#8f9494&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height:&lt;span class=&quot;string&quot;&gt;&amp;quot;100%&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//成功之后的函数回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onmarked&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;type, result, file&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; plus.barcode.QR:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            type = &lt;span class=&quot;string&quot;&gt;&amp;#x27;QR&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; plus.barcode.EAN13:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            type = &lt;span class=&quot;string&quot;&gt;&amp;#x27;EAN13&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; plus.barcode.EAN8:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            type = &lt;span class=&quot;string&quot;&gt;&amp;#x27;EAN8&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            type = &lt;span class=&quot;string&quot;&gt;&amp;#x27;其它&amp;#x27;&lt;/span&gt; + type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 获得扫描的二维码路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = result.replace(&lt;span class=&quot;regexp&quot;&gt;/\n/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//在data中设置变量codeUrl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        that.codeUrl = result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;在退出二维码页面时需要将二维码扫描关闭，不然会一直在页面中显示&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HBuilder 开发，Android自有证书生成及打包</title>
    <link href="https://blueskyadd.github.io/2019/08/15/uploadProject/"/>
    <id>https://blueskyadd.github.io/2019/08/15/uploadProject/</id>
    <published>2019-08-15T11:10:43.000Z</published>
    <updated>2019-12-23T09:26:56.309Z</updated>
    
    <content type="html"><![CDATA[<p>1、打开config/index.js 文件<br>修改build 下的assetsPublicPath路径<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assetsPublicPath: <span class="string">&#x27;/&#x27;</span>, 改为 assetsPublicPath: <span class="string">&#x27;./&#x27;</span>,</span><br></pre></td></tr></table></figure><br>2、打开build/utils.js文件 搜索‘publicPath’ 修改为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publicPath: <span class="string">&#x27;../../&#x27;</span></span><br></pre></td></tr></table></figure></p><h4 id="第二步、生成安装包所需证书"><a href="#第二步、生成安装包所需证书" class="headerlink" title="第二步、生成安装包所需证书"></a>第二步、生成安装包所需证书</h4><blockquote><p>安装包生成 可以使用DCloud 的HBuilder 或者APICloude 。双方各有其优点，这里以HBuilder 为例。</p></blockquote><p>1、首先是Android的证书文件生成，首先勾选使用自有证书：</p><a id="more"></a><p>2、下一步生成证书文件</p><blockquote><p>生成Android 证书的前提是安装Java的JDK到本地，JDK 安装包被集成在 Java SE 中，因此下载 Java SE 即可，具体步骤如下</p></blockquote><p>(1).打开<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">Java jdk</a>此页面下载安装包<br><img src="https://blueskyadd.github.io/myPicture/uploadProject/1.png" width="550" hegiht="313" align=center /></p><p>(2).点击Accept License Agreement，下载适合自己电脑版本的JDK.由于我的电脑是windows10 64位专业版，所以我选择的是最后一个。<br><img src="https://blueskyadd.github.io/myPicture/uploadProject/2.png" width="550"  align=center /><br>(3).下载完成之后安装（下一步即可）注意一下安装路径，下面要用</p><p>(4).环境配置<br><strong>注：这里描述可能不够详细我只做记录使用,可以点击<a href="https://blog.csdn.net/write6/article/details/79136388">此文章</a>查看详细教程</strong><br>(I)右键电脑属性，打开高级系统设置。<br><img src="https://blueskyadd.github.io/myPicture/uploadProject/3.png" width="550"  align=center /><br>(II)点击高级，再点击环境变量。<br><img src="https://blueskyadd.github.io/myPicture/uploadProject/4.png" width="550"  align=center /><br>(III)新建系统变量JAVA_HOME，变量值输入你的安装路径<br><img src="https://blueskyadd.github.io/myPicture/uploadProject/5.png" width="550"  align=center /><br>(Ⅳ)找到自己系统变量里的Path,双击，找到编辑文本点击，在变量值的最后添加   %USERPROFILE%\AppData\Local\Microsoft\WindowsApps<br>(IV)新建系统变量CLASSPATH，变量值填  .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar（注意这个变量值前面还有一个点，代表从当前路径）<br>(Ⅵ).测试是否安装成功，cmd打开dos系统。输入java,如果显示下面内容就表示安装成功。<br><img src="https://blueskyadd.github.io/myPicture/uploadProject/6.png" width="550"  align=center /></p><p>(5)运行成功后进入到安装Java jdk的bin目录下，以管理员身份打开powershell窗口，运行下面代码<br>    -alias mydemoapp  –表示别名，自定义修改<br>    -keyalg RSA           –产生键的加密算法<br>    -validity 40000         –有效期限4000天，自定义修改<br>    -keystore  myapp.keystore   –表示最后生成的证书文件名，自定义修改<br>    -sigalg SHA1WithRSA           –很重要否则在打包时会提示证书不是有效的keystore文件，因为HBuilder解析不了默认的证书格式<br>    -keysize 1024                    –很重要否则在打包时会提示证书不是有效的keystore文件，因为HBuilder解析不了默认的证书格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias mydemoapp -keyalg RSA -sigalg SHA1WithRSA -validity <span class="number">40000</span> -keysize <span class="number">1024</span> -keystore myapp.keystore</span><br></pre></td></tr></table></figure><p>之后会出现一个填写密钥的窗口，依次输入即可<br><strong>在输入密码时，窗口是不显示的，输入后回车即可</strong><br>输入完成后会生成一个myapp.keystore的文件</p><p>如果打包出现证书无效时 需要更改一下证书类型<br><strong>注：自己的证书名称要对应</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore myapp.keystore -destkeystore myapp.keystore -deststoretype JKS</span><br></pre></td></tr></table></figure><br>最后查看keystore文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore myapp.keystore</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、打开config/index.js 文件&lt;br&gt;修改build 下的assetsPublicPath路径&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assetsPublicPath: &lt;span class=&quot;string&quot;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;, 改为 assetsPublicPath: &lt;span class=&quot;string&quot;&gt;&amp;#x27;./&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;2、打开build/utils.js文件 搜索‘publicPath’ 修改为&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;publicPath: &lt;span class=&quot;string&quot;&gt;&amp;#x27;../../&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;第二步、生成安装包所需证书&quot;&gt;&lt;a href=&quot;#第二步、生成安装包所需证书&quot; class=&quot;headerlink&quot; title=&quot;第二步、生成安装包所需证书&quot;&gt;&lt;/a&gt;第二步、生成安装包所需证书&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;安装包生成 可以使用DCloud 的HBuilder 或者APICloude 。双方各有其优点，这里以HBuilder 为例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、首先是Android的证书文件生成，首先勾选使用自有证书：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>IOSAPP真机测试及上架App Store流程</title>
    <link href="https://blueskyadd.github.io/2019/07/27/iosUpload/"/>
    <id>https://blueskyadd.github.io/2019/07/27/iosUpload/</id>
    <published>2019-07-27T09:24:41.764Z</published>
    <updated>2019-12-23T09:25:53.835Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一步：申请iOS苹果开发者账号"><a href="#第一步：申请iOS苹果开发者账号" class="headerlink" title="第一步：申请iOS苹果开发者账号"></a>第一步：申请iOS苹果开发者账号</h4><p>首先先看一下ios不同账号的区别<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2018/06/002.png" alt="Alt text"></p><blockquote><p>这里以公司账号为例<br>  此账号是在个人普通账号上申请的，<br>  <a id="more"></a><br>1、<strong>申请个人apple id </strong>如果已经申请过apple id，跳过注册，直接看第2步申请！</p></blockquote><p><a href="https://appleid.apple.com/account?      localang=zh_CN#!&amp;page=create">点击此处即可申请个人账号</a>。<br>  按照提示依次填写信息<br> 注册跳转到这个下面这个页面说明苹果账号已经注册成功了。<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2018/11/4-768x523.png" alt="Alt text"></p><p>2、苹果开发者中心提交申请开发者。<br>(1)登录进去<a href="https://developer.apple.com/account">苹果开发者中心</a>，由于未付费购买开发者账号，会看到如下内容，点击加入开发者。<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2017/05/1-3.png" alt="Alt text"></p><p>(2)进入这个页面，点击注册，再点击开始你的注册。<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2017/05/2-2.png" alt="Alt text"><br>现在申请苹果开发者账号要求开启双重认证才能提交申请。如果未开启<a href="http://www.applicationloader.net/blog/zh/1998.html">点击此教程</a><br>接下来按照提示依次填写相应信息<br>(3)付款<br>付款成功后，会有个付款邮件反馈过来，确认收到付款，但账号不是马上可以用，快的话付款后十几分钟后就能用，一般要审核一两天，有可能发邮件给你让你上传身份证留意好邮件就行了。</p><p>如果收到这种邮件说明审核通过了。<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2018/08/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180822125802-1024x424.png" alt="Alt text"></p><p>审核成功登录上去<a href="https://developer.apple.com/account/">]ios开发者中心</a>会出现以下界面<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2017/05/9.png" alt="Alt text"></p><h4 id="第二步申请所需证书"><a href="#第二步申请所需证书" class="headerlink" title="第二步申请所需证书"></a>第二步申请所需证书</h4><p>由于发现在IOS开发者中心申请证书需要用到ios电脑，由于条件不满足，所偶另辟新径，找到了一款强大的第三方工具Appuploader。<br><img src="https://blueskyadd.github.io/myPicture/iosuploader/1.png" width="550" hegiht="313" align=center /></p><p>1、安装iOS上架辅助软件<a href="http://www.applicationloader.net/appuploader/download.php">Appuploader</a><br>无需安装，解压直接使用<br>2、申请 iOS证书文件p12 （ 发布版本同理，只需将类型修改为发布版即可）<br>(1)登录<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2018/08/1-3.png" alt="Alt text"></p><p>(2)下载证书</p><p><img src="http://www.applicationloader.net/blog/wp-content/uploads/2018/08/2-3.png" alt="Alt text"></p><p>点击右下角+ADD选择</p><pre><code>类型：选择开发证书（开发证书打包的才能安装到手机）输入证书名称：不要中文、随意设置邮箱：（随意）密码：证书的密码，不是开发者账号密码，如123这样不用很复杂，记好、打包时要用、很重要。应用id：这里不用选！点击ok创建。</code></pre><p><img src="https://blueskyadd.github.io/myPicture/iosuploader/2.png" width="550" hegiht="313" align=center /></p><p>然后点击P12下载即可<br>(3)申请iOS开发证书描述文件mobileprovision</p><p><img src="http://www.applicationloader.net/blog/wp-content/uploads/2019/03/6-1024x658.png" alt="Alt text"></p><p><strong>在申请ios描述文件之前，先添加好两样基础信息，应用id及苹果手机设备号udid</strong></p><p>(4)点击+ ADD，对应选择发布版profile</p><pre><code>应用id:选择对应的id（又称套装id，appid，BundleID，包名）证书：选中全部就行Devices：设备这里不像选开发版profile时会出现，发布版不用选。输入名称：不要中文，随意，123之类的就行，注意不要跟之前申请过的名称一样），点击ok创建。</code></pre><p><img sec='http://www.applicationloader.net/blog/wp-content/uploads/2018/08/10-2.png' width="550" hegiht="313" align=center ><br>(5)选择刚创建的发布版描述文件（iOS Distribution这个类型的就是发布描述文件，找刚创建的输入的名称），点击Download下载，保存到电脑<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2018/08/11-2.png" width="550" hegiht="313" align=center></p><p>(6)打开HBuilder工具，选择开发好的项目，点击发行，选择发行为原生安装包。<br><img src='http://www.applicationloader.net/blog/wp-content/uploads/2019/05/rr.png' width="550" hegiht="313" align=center><br>(7)选择iOS打包，支持的设备类型（可以选择支持iPhone和支持ipad），选择使用苹果证书<br>    AppID：跟申请证书描述.mobileprovision时选择的要一致（又称套装id，appid，BundleID，应用id，包名）</p><pre><code>profile文件：选择上传配置文件.mobileprovision私钥证书：上传.p12文件私钥密码：输入创建p12设置的密码。</code></pre><p><img src="http://www.applicationloader.net/blog/wp-content/uploads/2019/05/ww.png" width="550" hegiht="313" align=center></p><p>(8)安装IPA到手机进行测试(推荐使用爱思助手安装)<br>特别注意：ios不像安卓、不能直接把ipa文件发送到手机安装，需要通过手机助手安装，或者上传分发平台扫二维码安装，如蒲公英，fir这种分发平台。连接上手机、点击应用游戏，点击导入安装，选择刚打包的ipa包，或者直接选择ipa包右键通过爱思助手安装。<br><img src='http://www.applicationloader.net/blog/wp-content/uploads/2017/04/111-1.png'  width="550" hegiht="313" align=center><br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2017/04/222-1.png" width="550" hegiht="313" align=center><br>(9)申请iOS发布证书同开发证书过程相同，勾选发布证书即可<br>(10)登录<a href="https://itunesconnect.apple.com/login">iTunes Connect</a>，点击我的APP进入创建一个APP<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2018/04/1-1-1024x590.png" width="550" hegiht="313" align=center><br>进入点击左上角+号选择新建APP，选择平台iOS，<br>    应用名称：APP的名称</p><pre><code>语言：APP的语言，中文还是英文。套装ID：（应用id、appid、包名，跟申请证书使用的要保持一致）sku：不能写中文，自己用拼音随便编一个，好识别就行，如app叫淘宝，就输入taobao。用户访问权限：一般选完全访问权限</code></pre><p><img src="http://www.applicationloader.net/blog/wp-content/uploads/2018/08/0.png"  width="550" hegiht="313" align=center></p><p>(11)Windows环境下上传IPA到App Store<br>    Windows环境下上传IPA到App Store<br>    先创建一个APP专用密码，配置到Appuploader软件！<br>    苹果一种机制，上传ipa需要一个特定的APP专用密码，app-specific password</p><p>打开网站<a href="https://appleid.apple.com/zh_CN">https://appleid.apple.com/zh_CN</a><br>登录苹果开发者账号<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2017/02/ww.png" width="550" hegiht="313" align=center></p><p>登录进去找到安全项目，点击生成专用密码。</p><p><img src="http://www.applicationloader.net/blog/wp-content/uploads/2017/02/QQ%E5%9B%BE%E7%89%8720181031174948.png" width="550" hegiht="313" align=center></p><p>密码标签随便输入，123，app等之类的都行。</p><p>点击创建生成，（注意密码标签不是专用密码，是由苹果系统生成的一串密码）专用密码就是下面这个样子的密码，把这个密码复制，打开Appuploader</p><p><img src="http://www.applicationloader.net/blog/wp-content/uploads/2018/02/QQ%E5%9B%BE%E7%89%8720180208115232.png" width="550" hegiht="313" align=center></p><p>点击右上角，选择设置，把上传专用密码复制上去，同时勾选上保存密码，点击Save保存，然后再回去提交ipa上传就可以正常上传了。</p><p><img src="http://www.applicationloader.net/blog/wp-content/uploads/2017/02/211-1024x658.png" width="550" hegiht="313" align=center><br>(12)上传<br>输入专用密码点击OK保存后，点击单个ipa按钮提交<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2018/08/3-4-768x493.png" width="550" hegiht="313" align=center></p><p>选择刚打包测试没问题的ipa包</p><p><img src="http://www.applicationloader.net/blog/wp-content/uploads/2017/05/6.2.png" width="550" hegiht="313" align=center></p><p>上传成功<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2017/05/3-5.png" width="550" hegiht="313" align=center></p><p>(13)上传成功后到后台查看上传的版本</p><p>packages were  uploaded successfully 进度条蓝色，ipa上传成功后，登录iTunes Connect  <a href="https://itunesconnect.apple.com/login后台查看上传的ipa">https://itunesconnect.apple.com/login后台查看上传的ipa</a></p><p><img src="http://www.applicationloader.net/blog/wp-content/uploads/2019/02/111-1.png"  width="550" hegiht="313" align=center></p><p>(14)设置APP各项信息提交审核</p><p><img src="http://www.applicationloader.net/blog/wp-content/uploads/2017/09/2-1.png" width="550" hegiht="313" align=center></p><p>(15)选择左边第三项准备提交进入、这个页面需要设置几项信息、一步一步来。</p><p>先设置app截图！因为现在苹果规则的改变，iPhoneX刘海屏6.5的截图</p><p>(16)提交审核回到我的APP查看会提示正在等待审核，审核有时很快一两天，或要几天时间，常登陆看看审核情况，或看邮件提示。<br><img src="http://www.applicationloader.net/blog/wp-content/uploads/2017/09/11.png" width="550" hegiht="313" align=center></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一步：申请iOS苹果开发者账号&quot;&gt;&lt;a href=&quot;#第一步：申请iOS苹果开发者账号&quot; class=&quot;headerlink&quot; title=&quot;第一步：申请iOS苹果开发者账号&quot;&gt;&lt;/a&gt;第一步：申请iOS苹果开发者账号&lt;/h4&gt;&lt;p&gt;首先先看一下ios不同账号的区别&lt;br&gt;&lt;img src=&quot;http://www.applicationloader.net/blog/wp-content/uploads/2018/06/002.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里以公司账号为例&lt;br&gt;  此账号是在个人普通账号上申请的，&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>怎么愉快的通过线上地址访问我们的照片</title>
    <link href="https://blueskyadd.github.io/2019/07/25/githubUPdataImg/"/>
    <id>https://blueskyadd.github.io/2019/07/25/githubUPdataImg/</id>
    <published>2019-07-25T11:39:22.067Z</published>
    <updated>2019-12-23T09:25:40.868Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h4><p>首先打开<a href="https://github.com/">gitHub官网地址</a><br>然后创建一个GIt仓库来存放我们的图片<br><img src="https://blueskyadd.github.io/myPicture/githubupdataImg/1.png" width="550" hegiht="313" align=center /><br><a id="more"></a><br>然后填写相应的项目信息<br><img src="https://blueskyadd.github.io/myPicture/githubupdataImg/2.png" width="550" hegiht="313" align=center /></p><p>上传图片信息后打开setting</p><p><img src="https://blueskyadd.github.io/myPicture/githubupdataImg/3.png" width="550" hegiht="313" align=center /></p><p>其次在创建的图片仓库的设置中找到GitHub Pages，将Source中的none设置为master branch， 随即你便可以将在你的GitHub Pages存放和查看你仓库中的文件（github上项目运行演示也是如此）<br><img src="https://blueskyadd.github.io/myPicture/githubupdataImg/4.png" width="550" hegiht="313" align=center /></p><p>接着在地址栏中输入上图中github pages中的项目地址，在后面加上你想要的图片的图片名，便可以在线展示</p><p><img src="https://blueskyadd.github.io/myPicture/githubupdataImg/5.png" width="550" hegiht="313" align=center /><br><img src="https://blueskyadd.github.io/myPicture/githubupdataImg/6.png" width="550" hegiht="313" align=center /></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;创建git仓库&quot;&gt;&lt;a href=&quot;#创建git仓库&quot; class=&quot;headerlink&quot; title=&quot;创建git仓库&quot;&gt;&lt;/a&gt;创建git仓库&lt;/h4&gt;&lt;p&gt;首先打开&lt;a href=&quot;https://github.com/&quot;&gt;gitHub官网地址&lt;/a&gt;&lt;br&gt;然后创建一个GIt仓库来存放我们的图片&lt;br&gt;&lt;img src=&quot;https://blueskyadd.github.io/myPicture/githubupdataImg/1.png&quot; width=&quot;550&quot; hegiht=&quot;313&quot; align=center /&gt;&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何将Android App 发布到 腾讯应用宝</title>
    <link href="https://blueskyadd.github.io/2019/07/25/relaseAndroid/"/>
    <id>https://blueskyadd.github.io/2019/07/25/relaseAndroid/</id>
    <published>2019-07-25T11:11:27.189Z</published>
    <updated>2020-04-22T07:35:33.976Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一步-：首先打开腾讯开放平台"><a href="#第一步-：首先打开腾讯开放平台" class="headerlink" title="第一步 ：首先打开腾讯开放平台"></a>第一步 ：首先打开<a href="https://open.qq.com/app_plus">腾讯开放平台</a></h4><p><img src="https://blueskyadd.github.io/myPicture/releaseAndroid/1.png" width="550" hegiht="313" align=center /></p><h4 id="第二步、注册信息"><a href="#第二步、注册信息" class="headerlink" title="第二步、注册信息"></a>第二步、注册信息</h4><p>1、打开页面后登录，如果是公司团队开发最好重新申请qq账号，避免不必要的麻烦。登录之后在首页选择应用接入，开始进行开发者申请。<br><a id="more"></a><br><img src="https://www.anruan.com/Public/upload/downpic/20180522/1526955099397.jpg" alt="Alt text"><br>2、点击后选择注册类型 个人或者企业，以企业为例：<br><img src="https://www.anruan.com/Public/upload/downpic/20180522/1526955099822.jpg" alt="Alt text"></p><p>3、进入企业注册页面后首先填写公司相应的资料信息，注意上传图片的大小格式。<br><img src="https://www.anruan.com/Public/upload/downpic/20180522/1526955099903.jpg" alt="Alt text"></p><p>然后依次进行邮箱验证 最后完成注册，至此我们已经完成开发账号的创建；</p><h4 id="第三步、创建应用"><a href="#第三步、创建应用" class="headerlink" title="第三步、创建应用"></a>第三步、创建应用</h4><p>1、若未在QQ互联创建过应用，直接在此页面选择“创建应用”即可，请勿选择关联QQ互联。<br><img src="https://www.zesmob.com/wp-content/uploads/2017/06/iOS-yingyongbao-20170620.png" alt="Alt text"></p><p>2、若已在QQ互联创建过应用，可在创建应用时选择关联QQ互联，输入在QQ互联创建的网页应用APPID、APPKEY即可完成关联。<br><img src="https://www.zesmob.com/wp-content/uploads/2017/06/iOS-yingyongbao01-20170620.png" alt="Alt text"></p><p>3、选择应用类型，这里选择软件自己的APP类型即可</p><p><img src="https://blueskyadd.github.io/myPicture/releaseAndroid/2.png" width="550" hegiht="313" align=center /></p><p>4、然后进一步完善信息<br><img src="https://blueskyadd.github.io/myPicture/releaseAndroid/3.png" width="550" hegiht="313" align=center /></p><p>5、上传加固安装包<br>（1）安装包等级处理<br>    上传到应用宝、华为应用平台时出现错误：“装包的API等级(targetSdkVersion)必须等于或高于26，请重新打包上传”,加入以下字段即可。</p><pre><code>&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;minSdkVersion&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;targetSdkVersion&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20190617173851476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhaWJvMDY2OA==,size_16,color_FFFFFF,t_70" width="550" hegiht="313" align=center /><br>（2）安装包加固<br>    之后在上传安装包时会提示我们说“未加固应用，可能无法审核通过，应用宝将不予曝光和搜索”。</p><p><img src="https://blueskyadd.github.io/myPicture/releaseAndroid/5.png" width="550" hegiht="313" align=center /> </p><p>（3）安装乐谷加固<br>为了保护我们的劳动成果和知识产权，必须对APK对加固工作，否则极易被人破解、篡改，二次打包。市面上当前做加固的有很多家，实际使用了腾讯乐固和360加固（看了网易也有易盾，但是因为只能试用，所以没试）。本文介绍腾讯乐固的使用方法。<br>首先点击下载 <a href="https://console.cloud.tencent.com/ms/reinforce/tool">乐固加固</a>,使用微信登陆即可。</p><p><img src="https://blueskyadd.github.io/myPicture/releaseAndroid/6.png" width="550" hegiht="313" align=center /> </p><p>直接点击下一步即可安装,安装过完成的界面</p><p> <img src="https://blueskyadd.github.io/myPicture/releaseAndroid/7.png" width="550" hegiht="313" align=center /> </p><p>完成后登陆时我们需要创建一个密钥，点击<a href="https://console.cloud.tencent.com/cam/capi">这里</a>,来创建秘钥以供登录使用。</p><p><img src="https://blueskyadd.github.io/myPicture/releaseAndroid/8.png" width="550" hegiht="313" align=center /><br>（4）加固应用<br>登陆之后来到首页，首先创建应用，选择打包好的apk文件,注意要使用自有证书。详情请见另一片文章</p><p><img src="https://blueskyadd.github.io/myPicture/releaseAndroid/9.png" width="550" hegiht="313" align=center /> </p><p>上传成功后，会显示一下界面<br><img src="https://blueskyadd.github.io/myPicture/releaseAndroid/10.png" width="550" hegiht="313" align=center /> </p><p>然后点击下一步<br><img src="https://blueskyadd.github.io/myPicture/releaseAndroid/11.png" width="550" hegiht="313" align=center /> </p><p>提交完成后，会自动下载到同名文件下，我们只需将生成好的加固文件（包含签名的一个）上传到腾讯应用宝即可</p><p><img src="https://blueskyadd.github.io/myPicture/releaseAndroid/12.png" width="550" hegiht="313" align=center /><br>6、最后提交审核</p><p><img src="https://blueskyadd.github.io/myPicture/releaseAndroid/13.png" width="550" hegiht="313" align=center /> </p><hr><blockquote><p>注： 可通过ps直接修改：点击图像 –》图像大小然后改为相应像素；<br> <img src="https://blueskyadd.github.io/myPicture/releaseAndroid/4.png" width="550" hegiht="313" align=center /></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一步-：首先打开腾讯开放平台&quot;&gt;&lt;a href=&quot;#第一步-：首先打开腾讯开放平台&quot; class=&quot;headerlink&quot; title=&quot;第一步 ：首先打开腾讯开放平台&quot;&gt;&lt;/a&gt;第一步 ：首先打开&lt;a href=&quot;https://open.qq.com/app_plus&quot;&gt;腾讯开放平台&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://blueskyadd.github.io/myPicture/releaseAndroid/1.png&quot; width=&quot;550&quot; hegiht=&quot;313&quot; align=center /&gt;&lt;/p&gt;
&lt;h4 id=&quot;第二步、注册信息&quot;&gt;&lt;a href=&quot;#第二步、注册信息&quot; class=&quot;headerlink&quot; title=&quot;第二步、注册信息&quot;&gt;&lt;/a&gt;第二步、注册信息&lt;/h4&gt;&lt;p&gt;1、打开页面后登录，如果是公司团队开发最好重新申请qq账号，避免不必要的麻烦。登录之后在首页选择应用接入，开始进行开发者申请。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="移动端" scheme="https://blueskyadd.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="Android" scheme="https://blueskyadd.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>基于HBuilder 开发 项目之微信支付</title>
    <link href="https://blueskyadd.github.io/2019/07/20/weixinPay/"/>
    <id>https://blueskyadd.github.io/2019/07/20/weixinPay/</id>
    <published>2019-07-20T00:43:57.000Z</published>
    <updated>2019-12-23T09:27:21.940Z</updated>
    
    <content type="html"><![CDATA[<p>@(HBuilder)[微信支付 |vue]</p><p>此项目是基于vue开发的一款移动端app,然后基于HBuilder进行打包成apk文件。</p><h4 id="一-、用户申请微信开放平台申请移动应用"><a href="#一-、用户申请微信开放平台申请移动应用" class="headerlink" title="一 、用户申请微信开放平台申请移动应用"></a>一 、用户申请微信开放平台申请移动应用</h4><h5 id="首先进入微信开放平台-如果有账号的话直接登录，没有的话则根据步骤申请一个账号"><a href="#首先进入微信开放平台-如果有账号的话直接登录，没有的话则根据步骤申请一个账号" class="headerlink" title="首先进入微信开放平台,如果有账号的话直接登录，没有的话则根据步骤申请一个账号"></a>首先进入<a href="https://open.weixin.qq.com/">微信开放平台</a>,如果有账号的话直接登录，没有的话则根据步骤申请一个账号</h5><a id="more"></a><ul><li><strong>登陆注册</strong> ：首先进入<a href="https://open.weixin.qq.com/">微信开放平台</a>,如果有账号的话直接登录，没有的话则根据步骤申请一个账号</li><li><strong>创建应用</strong> ：可以根据提示一步一步操作</li></ul><blockquote><p><strong>注意：</strong>申请时需要用到app的包名和应用签名。<br>    <strong><strong>应用包名：</strong></strong> 是在APP项目配置文件AndroidManifest.xml中声明的package值.<br>    <strong><strong>应用签名：</strong></strong> 根据项目的应用包名和编译使用的keystore. 可由<a href="https://open.weixin.qq.com/zh_CN/htmledition/res/dev/download/sdk/Gen_Signature_Android.apk">签名工具</a>生成一个32位的md5串，我们将打包好的app（配有证书文件的前提）装在手机上，记住打包时需配置appID。打包时的具体流程详细配  置这里不再一一说明，如图所示<br><img src="https://pay.weixin.qq.com/wiki/doc/api/img/chapter8_5_3.png" alt="avatar"><br>另外也支持 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java JDK</a> 来生成MD5 签名,下载完双击安装。<strong><em>注意！！！此处有坑</em></strong>  Java JDK高版本的工具只能生成SHA1和SHA256这俩个微信支付用不了，，，所以请看清楚版本(推荐下载的版本为jdk-6u43-windows)<br>安装完成后以管理员身份进入Java下的bin目录，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Program Files (x86)\Java\jdk1.8.0_144\bin</span><br></pre></td></tr></table></figure><br>输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -keystore debug.keystore -alias androiddebugkey -keyalg RSA -validity 10000</span><br></pre></td></tr></table></figure><br>然后查看生成的证书文件debug.keystore</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore debug.keystore</span><br></pre></td></tr></table></figure><p>到这里签名就成功了</p><p>到此为止</p><h5 id="到此为止申请流程走通可以等待微信支付审核通过。"><a href="#到此为止申请流程走通可以等待微信支付审核通过。" class="headerlink" title="到此为止申请流程走通可以等待微信支付审核通过。"></a>到此为止申请流程走通可以等待微信支付审核通过。</h5><h4 id="二、调用HBuilder的-plus模块"><a href="#二、调用HBuilder的-plus模块" class="headerlink" title="二、调用HBuilder的 plus模块"></a>二、调用HBuilder的 plus模块</h4><pre><code>支付一共分为两步首先是获取手机的支付通道，这里的支付通道是我们在HBuilder 打包时所配置的支付模块</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F; 获取支付通道  </span><br><span class="line">    plus.payment.getChannels(function(channels) &#123;  </span><br><span class="line">    &#x2F;&#x2F;channel就是我们获取到的支付通道信息</span><br><span class="line">        var txt &#x3D; &#39;支付通道信息：&#39;;  </span><br><span class="line">            for(var i in channels) &#123;  </span><br><span class="line">                var channel &#x3D; channels[i];  </span><br><span class="line">                if(channel.id &#x3D;&#x3D; &#39;qhpay&#39; || channel.id &#x3D;&#x3D; &#39;qihoo&#39;) &#123; &#x2F;&#x2F; 过滤掉不支持的支付通道</span><br><span class="line">                    continue;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;, function(e) &#123;  </span><br><span class="line">        ddsd.log(&#39;获取支付通道失败：&#39; + e.message);  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;  </span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line"></span><br><span class="line">        子商户调用“服务商提供的接口”返回支付数据，在APP发起支付</span><br><span class="line">参数示例如下</span><br><span class="line">&lt;img width&#x3D;400 src&#x3D;&quot;https:&#x2F;&#x2F;blueskyadd.github.io&#x2F;myPicture&#x2F;wxpay.png&quot; &gt;</span><br><span class="line">    拿到参数后调取plus 模块 的支付</span><br></pre></td></tr></table></figure><p>plus.payment.request(pays, order, function(result) {<br>   //支付成功回调<br>}, function(e) {<br>    //支付失败回调<br>});<br><code>`</code></p><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><blockquote><p><strong><strong>pays</strong></strong> 参数为上面获取到的支付通道里的对象，，， 治理再调用微信支付时进行具体判断拿到参数对象<br><strong><strong>order</strong></strong>就是我们通过后台数据拿到的订单信息，切记转为字符串格式 </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@(HBuilder)[微信支付 |vue]&lt;/p&gt;
&lt;p&gt;此项目是基于vue开发的一款移动端app,然后基于HBuilder进行打包成apk文件。&lt;/p&gt;
&lt;h4 id=&quot;一-、用户申请微信开放平台申请移动应用&quot;&gt;&lt;a href=&quot;#一-、用户申请微信开放平台申请移动应用&quot; class=&quot;headerlink&quot; title=&quot;一 、用户申请微信开放平台申请移动应用&quot;&gt;&lt;/a&gt;一 、用户申请微信开放平台申请移动应用&lt;/h4&gt;&lt;h5 id=&quot;首先进入微信开放平台-如果有账号的话直接登录，没有的话则根据步骤申请一个账号&quot;&gt;&lt;a href=&quot;#首先进入微信开放平台-如果有账号的话直接登录，没有的话则根据步骤申请一个账号&quot; class=&quot;headerlink&quot; title=&quot;首先进入微信开放平台,如果有账号的话直接登录，没有的话则根据步骤申请一个账号&quot;&gt;&lt;/a&gt;首先进入&lt;a href=&quot;https://open.weixin.qq.com/&quot;&gt;微信开放平台&lt;/a&gt;,如果有账号的话直接登录，没有的话则根据步骤申请一个账号&lt;/h5&gt;
    
    </summary>
    
    
    
      <category term="微信" scheme="https://blueskyadd.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>bat文件执行 npm run dev</title>
    <link href="https://blueskyadd.github.io/2019/05/31/bat/"/>
    <id>https://blueskyadd.github.io/2019/05/31/bat/</id>
    <published>2019-05-31T10:50:01.388Z</published>
    <updated>2019-12-23T09:25:33.628Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>发现每次运行项目都需要一步步进入到项目文件，然后点开cmd 执行npm run dev，确实很麻烦很多余，最近发现了bat脚本可以直接运行 npm run dev省了很多时间,下面是bat文件的代码，可以直接放在桌面上，双击既可运行项目；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e: &#x2F;&#x2F;项目放在E盘中</span><br><span class="line">cd work &#x2F;&#x2F;E盘下面的文件夹</span><br><span class="line">cd woling_coach &#x2F;&#x2F;我的项目文件夹</span><br><span class="line">cd wolingJL &#x2F;&#x2F;我的项目名字</span><br><span class="line">set startDir&#x3D;%cd% </span><br><span class="line">npm run dev  &#x2F;&#x2F;运行npm run dev</span><br></pre></td></tr></table></figure><br>使用时将文件目录换成自己的即可</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;发现每次运行项目都需要一步步进入到项目文件，然后点开cmd 执行npm run dev，确实很麻烦很多余，最近发现了bat脚本可以直接运行 npm run dev省了很多时间,下面是bat文件的代码，可以直接放在桌面上，双击既可运行项目；&lt;br&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VUE页面后退无刷新</title>
    <link href="https://blueskyadd.github.io/2019/05/31/vueSessionStorage/"/>
    <id>https://blueskyadd.github.io/2019/05/31/vueSessionStorage/</id>
    <published>2019-05-31T10:40:13.442Z</published>
    <updated>2020-04-13T02:12:48.630Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>离开当前页面时记录当前位置，使用sessionStorage存储数据（其中 wrapbox  当前滚动页面最外层的div ,ref=wrapbox）<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//记录离开时的位置__&quot;)</span></span><br><span class="line">    sessionStorage.askPositon =</span><br><span class="line">    <span class="built_in">this</span>.$refs.wrapbox &amp;&amp; <span class="built_in">this</span>.$refs.wrapbox.scrollTop;</span><br><span class="line">    <span class="keyword">if</span>(to.name==<span class="string">&#x27;smission&#x27;</span> ||to.name==<span class="string">&#x27;buyer&#x27;</span>)&#123;</span><br><span class="line">    sessionStorage.askPositon =<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;<span class="comment">//前进时无需记录位置，可以将数据置为空</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;出去的位置&quot;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(sessionStorage.askPositon)</span><br><span class="line">    next();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>进入页面后采用离开时的位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(sessionStorage.askPositon)</span><br><span class="line"><span class="keyword">if</span> (!sessionStorage.askPositon) &#123;</span><br><span class="line"><span class="comment">//当前页面刷新不需要切换位置</span></span><br><span class="line">sessionStorage.askPositon = <span class="string">&quot;&quot;</span>;</span><br><span class="line">next();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (vm &amp;&amp; vm.$refs.wrapbox) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;进来的位置&quot;</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(sessionStorage.askPositon);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            vm.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                vm.$refs.wrapbox.scrollTop=sessionStorage.askPositon</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,<span class="number">80</span>); <span class="comment">//同步转异步操作</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;离开当前页面时记录当前位置，使用sessionStorage存储数据（其中 wrapbox  当前滚动页面最外层的div ,ref=wrapbox）&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hexo Hello World</title>
    <link href="https://blueskyadd.github.io/2019/05/31/hello-world/"/>
    <id>https://blueskyadd.github.io/2019/05/31/hello-world/</id>
    <published>2019-05-31T10:40:13.441Z</published>
    <updated>2019-12-23T09:25:47.452Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
